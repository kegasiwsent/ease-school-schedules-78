
import { useCallback } from 'react';
import jsPDF from 'jspdf';

interface TimetableEntry {
  subject: string;
  teacher: string;
  teacherId: string;
}

interface TeacherScheduleEntry {
  class: string;
  subject: string;
}

export const usePDFGenerator = () => {
  const generateClassTimetablePDF = useCallback((
    className: string,
    classTimetable: { [day: string]: (TimetableEntry | null)[] },
    days: string[]
  ) => {
    const pdf = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4'
    });

    // Title
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text(`Timetable for Class ${className}`, 148, 20, { align: 'center' });

    // Get max periods
    const maxPeriods = Math.max(...days.map(day => classTimetable[day]?.length || 0));

    // Table setup
    const startY = 40;
    const cellWidth = 35;
    const cellHeight = 15;
    const startX = 20;

    // Headers
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    
    // Time/Period header
    pdf.rect(startX, startY, cellWidth, cellHeight);
    pdf.text('Period', startX + cellWidth/2, startY + 10, { align: 'center' });

    // Day headers
    days.forEach((day, index) => {
      const x = startX + cellWidth + (index * cellWidth);
      pdf.rect(x, startY, cellWidth, cellHeight);
      pdf.text(day, x + cellWidth/2, startY + 7, { align: 'center' });
      
      // Show period count
      pdf.setFontSize(8);
      pdf.text(`(${classTimetable[day]?.length || 0} periods)`, x + cellWidth/2, startY + 12, { align: 'center' });
      pdf.setFontSize(12);
    });

    // Table body
    pdf.setFont('helvetica', 'normal');
    for (let period = 0; period < maxPeriods; period++) {
      const y = startY + cellHeight + (period * cellHeight);
      
      // Period number
      pdf.rect(startX, y, cellWidth, cellHeight);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`${period + 1}`, startX + cellWidth/2, y + 10, { align: 'center' });
      
      // Day cells
      days.forEach((day, dayIndex) => {
        const x = startX + cellWidth + (dayIndex * cellWidth);
        pdf.rect(x, y, cellWidth, cellHeight);
        
        const entry = classTimetable[day]?.[period];
        if (entry) {
          pdf.setFont('helvetica', 'bold');
          pdf.setFontSize(10);
          pdf.text(entry.subject, x + cellWidth/2, y + 6, { align: 'center' });
          
          pdf.setFont('helvetica', 'normal');
          pdf.setFontSize(8);
          pdf.text(entry.teacher, x + cellWidth/2, y + 12, { align: 'center' });
        } else if (period < (classTimetable[day]?.length || 0)) {
          pdf.setFont('helvetica', 'italic');
          pdf.setFontSize(9);
          pdf.text('Free Period', x + cellWidth/2, y + 10, { align: 'center' });
        } else {
          pdf.setFontSize(9);
          pdf.text('—', x + cellWidth/2, y + 10, { align: 'center' });
        }
        pdf.setFontSize(12);
      });
    }

    // Footer
    const footerY = startY + cellHeight + (maxPeriods * cellHeight) + 20;
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Generated by EduEase School Management System', 148, footerY, { align: 'center' });
    pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 148, footerY + 5, { align: 'center' });

    return pdf;
  }, []);

  const generateAllTimetablesPDF = useCallback((
    timetables: { [className: string]: { [day: string]: (TimetableEntry | null)[] } },
    days: string[]
  ) => {
    const pdf = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4'
    });

    const classNames = Object.keys(timetables);
    
    classNames.forEach((className, classIndex) => {
      if (classIndex > 0) {
        pdf.addPage();
      }
      
      const classTimetable = timetables[className];
      const tempPdf = generateClassTimetablePDF(className, classTimetable, days);
      
      // Copy content from temp PDF
      const pageCount = tempPdf.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        if (i > 1 || classIndex > 0) {
          pdf.addPage();
        }
        // Note: This is a simplified approach. In a real implementation,
        // you might need to recreate the content for each page.
      }
    });

    return pdf;
  }, [generateClassTimetablePDF]);

  const generateTeacherTimetablePDF = useCallback((
    teacherName: string,
    teacherSchedule: { [day: string]: (TeacherScheduleEntry | null)[] },
    days: string[]
  ) => {
    const pdf = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4'
    });

    // Title
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text(`Teacher Timetable - ${teacherName}`, 148, 20, { align: 'center' });

    // Get max periods
    const maxPeriods = Math.max(...days.map(day => teacherSchedule[day]?.length || 0));

    // Table setup
    const startY = 40;
    const cellWidth = 35;
    const cellHeight = 15;
    const startX = 20;

    // Headers
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    
    // Time/Period header
    pdf.rect(startX, startY, cellWidth, cellHeight);
    pdf.text('Period', startX + cellWidth/2, startY + 10, { align: 'center' });

    // Day headers
    days.forEach((day, index) => {
      const x = startX + cellWidth + (index * cellWidth);
      pdf.rect(x, startY, cellWidth, cellHeight);
      pdf.text(day, x + cellWidth/2, startY + 10, { align: 'center' });
    });

    // Table body
    pdf.setFont('helvetica', 'normal');
    for (let period = 0; period < maxPeriods; period++) {
      const y = startY + cellHeight + (period * cellHeight);
      
      // Period number
      pdf.rect(startX, y, cellWidth, cellHeight);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`${period + 1}`, startX + cellWidth/2, y + 10, { align: 'center' });
      
      // Day cells
      days.forEach((day, dayIndex) => {
        const x = startX + cellWidth + (dayIndex * cellWidth);
        pdf.rect(x, y, cellWidth, cellHeight);
        
        const entry = teacherSchedule[day]?.[period];
        if (entry) {
          pdf.setFont('helvetica', 'bold');
          pdf.setFontSize(10);
          pdf.text(entry.class, x + cellWidth/2, y + 6, { align: 'center' });
          
          pdf.setFont('helvetica', 'normal');
          pdf.setFontSize(8);
          pdf.text(entry.subject, x + cellWidth/2, y + 12, { align: 'center' });
        } else if (period < (teacherSchedule[day]?.length || 0)) {
          pdf.setFont('helvetica', 'italic');
          pdf.setFontSize(9);
          pdf.text('Free Period', x + cellWidth/2, y + 10, { align: 'center' });
        } else {
          pdf.setFontSize(9);
          pdf.text('—', x + cellWidth/2, y + 10, { align: 'center' });
        }
        pdf.setFontSize(12);
      });
    }

    // Footer
    const footerY = startY + cellHeight + (maxPeriods * cellHeight) + 20;
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Generated by EduEase School Management System', 148, footerY, { align: 'center' });
    pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 148, footerY + 5, { align: 'center' });

    return pdf;
  }, []);

  return {
    generateClassTimetablePDF,
    generateAllTimetablesPDF,
    generateTeacherTimetablePDF
  };
};
